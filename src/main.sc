require: slotfilling/slotFilling.sc
  module = sys.zb-common
require: scripts/service.js
    
theme: /
    state: Start || sessionResult = "–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å—é–¥–∞", sessionResultColor = "#143AD1"
        q!: $regex</start>
        a: –ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞.
        go!: /Menu

    state: NoMatch
        event!: noMatch
        a: –Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å.
        go!: /Menu
    state: Hello || noContext = true, sessionResultColor = "#FFFF00"
        intent!: /sys/aimylogic/ru/hello
        a: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
    state: GoodBye || noContext = true, sessionResultColor = "#FFFF00"
        q!: $regex</start>
        a: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!
        intent!: /sys/aimylogic/ru/parting
    state: HowAreYou
        intent!: /–ö–∞–∫ –¥–µ–ª–∞
        random: 
            a: –û—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å?
            a: –û—Ç–ª–∏—á–Ω–æ! –ê –≤—ã?
        intent: /sys/aimylogic/ru/approval || toState = "/GoodMood"
        intent: /sys/aimylogic/ru/negative || toState = "/BadMood"
        intent: /sys/aimylogic/ru/insults || toState = "/BadMood"
        event: noMatch || toState = "/UnknownReaction"
    state: UnknownReaction
        a: –ü–æ–Ω—è—Ç–Ω–æ. –ó–∞–¥–∞–π—Ç–µ
                –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ 
                –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å.
        go!: /ReturnTo
    state: GoodMood
        a: –Ø —Ä–∞–¥. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ
            –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ 
            –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.
        go!: /ReturnTo

    state: BadMood
        a: –ñ–∞–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, —è
                —Å–º–æ–≥—É –ø–æ–º–æ—á—å. –ó–∞–¥–∞–π—Ç–µ 
                –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ 
                –Ω–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å.
        go!: /ReturnTo
    state: YourName
        intent!: /–ö—Ç–æ —Ç—ã
        a: –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è.
        intent: /sys/aimylogic/ru/name || toState = "/YourNameReaction"
    state: YourNameReaction
        a: –ü—Ä–∏—è—Ç–Ω–æ
            –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!
        go!: /ReturnTo
    state: Service
        q!: —Ç–æ
        q!: —Ç–µ—Ö
        q!: *—Ç–µ—Ö*
        q!: *–æ–±—Å*
        q!: *—Å–º–æ—Ç—Ä*
        script:
            $session.lastState = "/Service"
        if: CheckRequest()
            a: {{GetReadyMessage()}}
            go!: /Confirmation
        else: 
            a: a: {{GetServiceMessage()}}
            go: /Analyzer
        event: noMatch || toState = "/Service"
    state: ReturnTo
        if: $session.lastState && $session.lastState === "/Service"
            a: –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞—è–≤–∫–∏ –Ω–∞ –¢–û.
            go!: /Service
        else: 
            go!: /Menu
    state: Confirmation
        intent: /sys/aimylogic/ru/agreement || toState = "/SendRequest"
    state: SendRequest
        HttpRequest: 
            url = https://auto-service/request
            method = PUT
            dataType = 
            body = {
                "name":"{{$client.name}}",
                "phone":"{{$client.phone}}",
                "car":"{{$client.car}}"
                }
            timeout = 0
            headers = [{"name":"","value":""}]
            vars = []
            okState = /SuccesRequest
            errorState = /ErrorRequest
    state: ErrorRequest
        a: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. || htmlEnabled = false, html = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        go!: /Service
    state: SuccesRequest
        a: –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∞. || htmlEnabled = false, html = "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∞."
        go!: /Service

    state: Menu
        intent!: /–ú–µ–Ω—é
        a: –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?
        script:
            $session.lastState = "/Menu"
        buttons:
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û" -> /Service
    state: Analyzer
        q: * || fromState = "/Analyzer"
        script:
            // –°–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
            var targetEntities = ["pymorphy.name", "mystem.famn", "pymorphy.patr", "duckling.phone-number", "–ú–∞—Ä–∫–∞_–∞–≤—Ç–æ–º–æ–±–∏–ª—è"];
            
            // –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–∞–∫–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ —É–∂–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
            var foundTypes = {};
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ $entities
            $entities.forEach(function(entity) {
                if (targetEntities.indexOf(entity.pattern) !== -1 && !foundTypes[entity.pattern]) {
                    foundTypes[entity.pattern] = true;
                    
                    switch(entity.pattern) {
                        case "pymorphy.name":
                            $client.firstName = capitalize(entity.value);
                            break;
                        case "mystem.famn":
                            $client.lastName = capitalize(entity.value);
                            break;
                        case "pymorphy.patr":
                            $client.patronymic = capitalize(entity.value);
                            break;
                        case "duckling.phone-number":
                            $client.phone = entity.value;
                            break;
                        case "–ú–∞—Ä–∫–∞_–∞–≤—Ç–æ–º–æ–±–∏–ª—è":
                            $client.car = entity.value;
                            break;
                    }
                }
            });
    
        if: CheckRequest()
            a: {{GetReadyMessage()}}
            go!: /Confirmation
        else: 
            a: {{GetServiceMessage()}}